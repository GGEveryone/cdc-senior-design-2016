shiny::runApp()
install.packages("plotly")
shiny::runApp()
shiny::runApp()
getwd()
source("init/init_libraries.R")
shiny::runApp()
install.packages("readxl")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplotly
py$ggplotly()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
param <- param.dcm(inf.prob = input$inf.prob, act.rate = input$act.rate, rec.rate = input$rec.rate)
init <- init.dcm(s.num = input$s.num, i.num = input$i.num, r.num=input$r.num)
control <- control.dcm(type = "SIR", nsteps = input$nsteps)
mod <- dcm(param, init, control)
source("init/init_libraries.R")
param <- param.dcm(inf.prob = input$inf.prob, act.rate = input$act.rate, rec.rate = input$rec.rate)
init <- init.dcm(s.num = input$s.num, i.num = input$i.num, r.num=input$r.num)
control <- control.dcm(type = "SIR", nsteps = input$nsteps)
mod <- dcm(param, init, control)
# Store mod output as a dataframe
df <- as.data.frame(mod)
keeps <- c("s.num", "i.num", "r.num", "time")
df <- df[keeps]
meltdf <- melt(df, id="time")
param <- param.dcm(inf.prob = input$inf.prob, act.rate = input$act.rate, rec.rate = input$rec.rate)
init <- init.dcm(s.num = input$s.num, i.num = input$i.num, r.num=input$r.num)
# Import EpiModel package
library(EpiModel)
# Import ggplot2 package
library(ggplot2)
# Import plotly package
library(plotly)
# Import reshape2 package
library(reshape2)
# inf.prob = transmission probability per act
# init.dcm = initial conditions
# controls = type of model etc...
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25, rec.rate = 0.10)
init <- init.dcm(s.num = 1000, i.num = 1, r.num=0)
control <- control.dcm(type = "SIR", nsteps = 10)
# Wrap around all model parameters with dcm
mod <- dcm(param, init, control)
### Below for plotting:
# Store mod output as a dataframe
df <- as.data.frame(mod)
#plot(mod, main = "Prevalence vs. Time")
# Melt dataframe for graphing purposes
keeps <- c("s.num", "i.num", "r.num", "time")
df <- df[keeps]
meltdf <- melt(df, id="time")
meltdf
names(meltdf)
names(meltdf)[1] <- paste("Time")
names(meltdf)
names(meltdf)[3] <- paste("Prevalence")
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
ggplotly()
meltdf
meltdf[,3]
meltdf[,3] <- meltdf[,3]/1000
meltdf
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25, rec.rate = 0.10)
init <- init.dcm(s.num = 1000, i.num = 1, r.num=0)
control <- control.dcm(type = "SIR", nsteps = 10)
# Wrap around all model parameters with dcm
mod <- dcm(param, init, control)
### Below for plotting:
# Store mod output as a dataframe
df <- as.data.frame(mod)
#plot(mod, main = "Prevalence vs. Time")
# Melt dataframe for graphing purposes
keeps <- c("s.num", "i.num", "r.num", "num", "time")
df <- df[keeps]
meltdf <- melt(df, id="time")
meltdf
df
df$num
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
meltdf
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
meltdf
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
meltdf
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
meltdf
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
meltdf
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
ggplotly()
meltdf$variable[meltdf$variable == "s.num"] <- "Perc. Susceptable"
meltdf$variable[meltdf$variable == "s.num"] <- "Perc.Susceptable"
meltdf$variable[meltdf$variable == s.num] <- "Perc.Susceptable"
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
shiny::runApp()
source('~/senior-design-2016/shiny/epiModel+SIRscript.R')
ggplotly()
shiny::runApp()
?read_excel
shiny::runApp()
source('~/senior-design-2016/shiny_v1/init/init_libraries.R')
shiny::runApp()
getwd()
read_excel("data/model+params.xlsx")
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.inter
names(model.inter)
model.inter[,2:6]
model.inter[,3:6]
model.df
model.def
model.init
model.init[,3]
model.init[,3:]
model.init[,3::]
model.init[,3:length(names(mode.init))]
model.init[,3:length(names(model.init))]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.params
model.init
model.init <- subset(model.init, !is.na(mode.init))
!is.na(mode.init)
model.init <- subset(model.init, !is.na(model.init))
model.init
!is.na(model.init)
mode.init[!sapply(is.na(model.init),any)]
model.init[!sapply(is.na(model.init),any)]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.init[!sapply(is.na(model.init),any)]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.init[sapply(!is.na(model.init),all)]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.init
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.params
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.inter
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.params
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source("init/init_libraries.R")
install.packages("readxl")
source("init/init_libraries.R")
shiny::runApp()
shiny::runApp()
?switch
shiny::runApp()
?read_excel
shiny::runApp()
shiny::runApp()
shiny::runApp()
file1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabsetPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
1/800
/180
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
plot(mod)
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
plot(mod)
plot(mod)
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
plot(mod)
df <- as.data.frame(mod)
df
names(df)
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
ggplotly()
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
?dcm
?init.dcm
?param.dcm
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
ggplotly()
source('~/senior-design-2016/shiny_v1/scripts/DCM+SIR+withdemo.R')
shiny::runApp()
shiny::runApp()
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.init
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.params
model.params[:-1,]
model.params[-1,]
model.params
model.params[1:8,]
model.init
model.init[1:3]
model.init[1:3,]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.inter
shiny::runApp()
model.init
model$value[1]
model$value[1,]
model.init$value[1]
model.init$Value[1]
model.init$Value[2]
model.init$Value[,2]
model.init$VLower\Bound[2]
model.init$VLower/Bound[2]
model.init$\Lower/Bound[2]
model.init$Lower/Bound[2]
model.init$Lower\/Bound[2]
model.init["Lower Bound"][2]
model.init["Lower bound"][1]
model.init["Lower bound"][1][1]
model.init["Lower bound"][[1]
]
model.init["Lower bound"][[1]][1]
model.init["Upper bound"][[1]][1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
model.init$Value[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
model.init
shiny::runApp()
model.init$Value[2]
model.init$Value[[2]
]
model.init["Lower bound"][[2]]
model.init["Lower bound"][[1]]
model.init["Lower bound"][[1]][2]
shiny::runApp()
shiny::runApp()
model.params
shiny::runApp()
model.params["Lower bound"][[1]][8]
model.params["Upper bound"][[1]][8]
source('~/senior-design-2016/shiny_v1/scripts/modelParams+read.R')
model.params["Upper bound"][[1]][8]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
model.init
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
